2013-10-13
----------

Separate steering control from collision control.

It would just make more sense. Currently the steering control is hidden in the collision control. The steering control gets the target heading and current heading and does feedback control.

The tricky part appears to be priority over the steering command. Both waypoint control and collision control will attempt to override the steering from time to time. The collision control should override the waypoint control.

Maybe it won't... the waypoint control only overrides the steering when the collision control is 'blocked' so hmmm maybe the problem is avoided. The issue of command priority is still there because currently the waypoint controller is checking if the collision control is dodging before messing with the steering.

2013-10-16
----------

Splitting the steering control out was ok, but making the collision control compete with waypoint control, rather than having collision control as the gatekeeper to speed/steering was a mistake. Much easier to have collision control implement those controller's interfaces and pass the commands on when it is safe.

Some trouble getting stuck on trees. Car dodges a tree, gets to a waypoint and turns hard enough that the side of the car hits the tree and it's stuck. A few ways to deal with it... easiest would be to reduce the max steering angle so the car can't turn that hard. Not the nicest.

2013-10-17
----------

After setting up the GitHub, not sure what to do next... some things:
* Make the GPS/compass more releaistic. The GPS will give lat/lon via NMEA and it will be noisy. The controller should be using that rather than the clean x,y,z it gets now.
* Deal with the side-of-car-bashing-into-tree issue.
* Also general dodging behaviour is a bit dodgy ... urgh.
* Mark dodge and blocked events on the map.

2013-10-22
----------

The current plan is to put adaptor.py between the controller and sim, this will make sensors more like real ones. GPS for example will have fix/lat/lon/knots/heading and compass will have positive degrees to the right of north.

2013-10-27
----------

Change of plan over the weekend, change morse itself to report lat/lon from the gps. Also add a new compass sensor.

2013-10-31
----------

Switch to use the lat/lon of the GPS sensor and compass heading. The dodge/reverse appears to be broken.

2013-11-03
----------

GPS and compass noise added directly into the morse sensors, it is less effort than the official modifier method. Morse additions put up on the github.

Reverse seems to work ok now with the addition of state.distance. Not sure what to try next.

2013-11-16
----------

Split gps/compass noise into modifiers to conform to existing morse.

Copied hummer to make minihummer, copied code to scale it down, trouble when scaling down the blend file. One cannot just scale by 1/3 in blender object mode. The meshes must be rescaled in edit mode. Some pain learning about object origins while doing this... scaling meshes with not-the-real-origin origin messes up the robot model in morse. Next some trouble with the front of the hummer tilting down, "fixed" by reducing the suspension length. Not sure if that was the right thing to do. Also reduced minihummer's mass (in blender) from 10 to 3.

2014-01-11
----------

Many changes... 

The simulation is changed to use the auto-generated file structure. Get this when making a robot using morse create and morse add. The minihummer robot is outside of the morse source tree and inside the simulation dir. Part of this is the MORSE_RESOURCE_PATH environment variable must be set to somedir/morse-car-controller/simulation to pick up the environments in simulation/environments.

The collision control is changed a lot. First, the collision controller no longer takes a references to the steering control. The steering control is renamed to heading control, and collision control gets the steering parameter set by it.

What happens now is, waypoint control turns heading control on and off when it wants. Either heading or waypoint control will request a steering and speed. The request is to collision control. If the steering and speed won't cause a collision, ok the steering is set and the speed controller gets the desired speed, otherwise the collision control will try to steer another way or say "blocked" and stop.

Inside the collision control, the method of detecting a collision is changed. The code now generates a path (series of x-y points) that it thinks the car will take and checks if that path is near obstacles detected in the scan. If it is near, different paths will be tested with increasing steer deviation until either a clear path or there are no more paths to try, at that point the car is "blocked".

This method is sort-of working... there are still bugs where the car acts blocked when it should not ... also the length/turning-circle calcution seems wrong. Want to measure turning circle for a number of steering angles to see what it should be.



